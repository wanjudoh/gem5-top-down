diff --git a/configs/common/Options.py b/configs/common/Options.py
index 8344d9fd44..67e8de734b 100644
--- a/configs/common/Options.py
+++ b/configs/common/Options.py
@@ -233,6 +240,82 @@ def addNoISAOptions(parser):
         "only parameters of its children.",
     )
 
+    parser.add_argument(
+        "--fetchWidth",
+        type=int,
+        default=8,
+        action="store",
+    )
+
+    parser.add_argument(
+        "--decodeWidth",
+        type=int,
+        default=8,
+        action="store",
+    )
+
+    parser.add_argument(
+        "--renameWidth",
+        type=int,
+        default=8,
+        action="store",
+    )
+
+    parser.add_argument(
+        "--dispatchWidth",
+        type=int,
+        default=8,
+        action="store",
+    )
+
+    parser.add_argument(
+        "--issueWidth",
+        type=int,
+        default=8,
+        action="store",
+    )
+
+    parser.add_argument(
+        "--wbWidth",
+        type=int,
+        default=8,
+        action="store",
+    )
+
+    parser.add_argument(
+        "--commitWidth",
+        type=int,
+        default=8,
+        action="store",
+    )
+
+    parser.add_argument(
+        "--squashWidth",
+        type=int,
+        default=8,
+        action="store",
+    )
+
+    parser.add_argument(
+        "--LQEntries",
+        type=int,
+        default=32,
+       action="store",
+    )
+
+    parser.add_argument(
+        "--SQEntries",
+        type=int,
+        default=32,
+        action="store",
+    )
+
+    parser.add_argument(
+        "--IQEntries",
+        type=int,
+        default=64,
+        action="store",
+    )
 
 # Add common options that assume a non-NULL ISA.
 
diff --git a/configs/common/Simulation.py b/configs/common/Simulation.py
index 4377b65e64..6b9f4b5866 100644
--- a/configs/common/Simulation.py
+++ b/configs/common/Simulation.py
@@ -82,6 +82,39 @@ def setCPUClass(options):
         TmpClass = AtomicSimpleCPU
         test_mem_mode = "atomic"
 
+    if options.fetchWidth:
+        TmpClass.fetchWidth = options.fetchWidth
+
+    if options.decodeWidth:
+        TmpClass.decodeWidth = options.decodeWidth
+
+    if options.renameWidth:
+        TmpClass.renameWidth = options.renameWidth
+
+    if options.dispatchWidth:
+        TmpClass.dispatchWidth = options.dispatchWidth
+
+    if options.issueWidth:
+        TmpClass.issueWidth = options.issueWidth
+
+    if options.wbWidth:
+        TmpClass.wbWidth = options.wbWidth
+
+    if options.commitWidth:
+        TmpClass.commitWidth = options.commitWidth
+
+    if options.squashWidth:
+        TmpClass.squashWidth = options.squashWidth
+
+    if options.LQEntries:
+        TmpClass.LQEntries = options.LQEntries
+
+    if options.SQEntries:
+        TmpClass.SQEntries = options.SQEntries
+
+    if options.IQEntries:
+        TmpClass.numIQEntries = options.IQEntries
+
     # Ruby only supports atomic accesses in noncaching mode
     if test_mem_mode == "atomic" and options.ruby:
         warn("Memory mode will be changed to atomic_noncaching")
